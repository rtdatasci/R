xlab = "Ozone level",
main = "Histogram of Ozone level")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
View(airquality)
###################################################################################
# Import libraries
library(data.table)
library(RCurl)
library(randomForest)
install.packages("RCurl")
install.packages("randomForest")
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
class(weather)
class(weather$temperature)
class(weather$humidity)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
View(iris)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
install.packages('ZillowR')
#install.packages('ZillowR')
library(ZillowR)
library(tidystringdist)
install.packages("tidystringdist")
library(tidystringdist)
df <- tidy_comb_all(iris, Species)
p <- tidy_stringdist(df)
View(df)
View(p)
#current R Version with:
R.Version()$version.string
#start the Dockerfile with:
FROM rocker/r-ver:4.2.1
.libPaths()
library(tidyverse)
library(gapminder)
## correlation
gapminder
## correlation
gapminder_df <- gapminder
View(gapminder_df)
gapminder_df %>% select(lifeExp, gdpPercap) %>% summarise_all(mean)
gapminder_df %>% summarise(correlation = cor(lifeExp, gdpPercap))
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap))
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap))+
geom_point()
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point()
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm"
se =  FALSE
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",
se =  FALSE
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  TRUE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)+geom_point(alpha= .5)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point(alpha= 0.5) +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point(alpha= .5) +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point()
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point(alpha=0.5) +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# calculate slope using lm that uses two args
lm(gdpPercap ~ lifeExp, data = gapminder_df)
# or
gapminder_df %>%
lm(gdpPercap ~ lifeExp)
# calculate slope using lm that uses two args
lm(gdpPercap ~ lifeExp,  # response variable in the left and explanatory in right
data = gapminder_df)
# for our example, let's use continent as category and plot histogram
ggplot(gapminder_df, aes(gdpPercap))+
geom_histogram(bins = 9)+
facet_wrap(vars(continent))
#summary stats
gapminder_df %>%
group_by(continent) %>%
summarise(mean_gdp = mean(gdpPercap))
# run lm using gdp as response variable
lm(gdpPercap ~ continent, data = gapminder_df)
## where is Africa coeff? -- intercept is the mean_gdp for Africa
# here americas asia europe oceania are multiple explanatory variables or multiple slopes-- this is where linear model gets confusing
# therefore change formula to fix intercept = 0 to ensure all coeffs are relative to zero
lm(gdpPercap ~ continent + 0, data = gapminder_df)
gapminder_df %>% filter(continent == "Asia")
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
asia <- gapminder_df %>% filter(continent == "Asia")
ggplot(asia,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
model_life_gdp <- lm(gdpPercap ~ lifeExp, data = asia)
model_life_gdp
model_life_gdp <- lm(gdpPercap ~ lifeExp + 0, data = asia)
model_life_gdp
model_life_gdp <- lm(gdpPercap ~ lifeExp, data = asia)
View(asia)
# set explanatory vairable to a var to use later to predict calculation
explanatory_var <- tibble(lifeExp = 10:500)
explanatory_var
# next, predict
predict(model_life_gdp, explanatory_var)
# set explanatory vairable to a var to use later to predict calculation
explanatory_var <- tibble(lifeExp = 10:20)
# next, predict based on model and explanatory var; returns a vector of predictions one for each row of explantory data:
predict(model_life_gdp, explanatory_var)
# set explanatory vairable to a var to use later to predict calculation
explanatory_var <- tibble(lifeExp = 200:210)
# next, predict based on model and explanatory var; returns a vector of predictions one for each row of explantory data:
predict(model_life_gdp, explanatory_var)
# set explanatory vairable to a var to use later to predict calculation
explanatory_data <- tibble(lifeExp = 200:210)
# next, predict based on model and explanatory var; returns a vector of predictions one for each row of explantory data:
predict(model_life_gdp, explanatory_data)
# put predict in a df for ease to use
predict_df <- explanatory_data %>%
mutate(
gdp = predict(model_life_gdp, explanatory_data)
)
View(predict_df)
head(predict_df)
# plot prediction on top of actual data
ggplot(asia,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)+
geom_point(
data =  predict_df,
color = "blue"
)
View(asia)
ggplot(asia,
aes(lifeExp, gdpPercap)
)+
geom_point()
# put predict in a df for ease to use
predict_df <- explanatory_data %>%
mutate(
gdpPercap = predict(model_life_gdp, explanatory_data)
)
# plot prediction on top of actual data
ggplot(asia,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)+
geom_point(
data =  predict_df,
color = "blue"
)
# make extrapolation outside of data range
extrapolation_explanatory_data <- tibble(lifeExp = 10)  # 10 is outside of data range
extrapolation_predict_df <- explanatory_data %>%
mutate(
gdpPercap = predict(model_life_gdp, extrapolation_explanatory_data)
)
extrapolation_predict_df
extrapolation_explanatory_data
predict(model_life_gdp, extrapolation_explanatory_data)
?optparse
install.packages("optparse")
?optparse
# make extrapolation outside of data range
extrapolation_explanatory_data <- tibble(lifeExp = 10)  # 10 is outside of data range
library(tidyverse)
library(gapminder)
## correlation btween life expectancy and gdp per capital income
gapminder_df <- gapminder
gapminder_df %>% select(lifeExp, gdpPercap) %>% summarise_all(mean)
gapminder_df %>% summarise(correlation = cor(lifeExp, gdpPercap))
# visualize before running regression
ggplot(gapminder_df,
aes(lifeExp, gdpPercap)
)+
geom_point(alpha=0.5) +  # alpha =0.5 to make points 50% transparent
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
# calculate slope using lm that uses two args
# predicting gdp based on life expectancy
lm(gdpPercap ~ lifeExp,  # response variable (how much is gdp) in the left and explanatory in right (based on lifeexp)
data = gapminder_df)
# for our example, let's use continent as category and plot histogram
ggplot(gapminder_df, aes(gdpPercap))+
geom_histogram(bins = 9)+
facet_wrap(vars(continent)) # name of var to split data on eg. continent
#summary stats
gapminder_df %>%
group_by(continent) %>%
summarise(mean_gdp = mean(gdpPercap))
# run lm using gdp as response variable
lm(gdpPercap ~ continent, data = gapminder_df)
## where is Africa coeff? -- intercept is the mean_gdp for Africa
# here americas asia europe oceania are multiple explanatory variables or multiple slopes-- this is where linear model gets confusing
# therefore change formula to fix intercept = 0 to ensure all coeffs are relative to zero
lm(gdpPercap ~ continent + 0, data = gapminder_df)
asia <- gapminder_df %>% filter(continent == "Asia")
ggplot(asia,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)
model_life_gdp <- lm(gdpPercap ~ lifeExp, data = asia)
# set explanatory vairable to a var to use later to predict calculation
explanatory_data <- tibble(lifeExp = 200:210)
# next, predict based on model and explanatory var; returns a vector of predictions one for each row of explantory data:
predict(model_life_gdp, explanatory_data)
# put predict in a df for ease to use
predict_df <- explanatory_data %>%
mutate(
gdpPercap = predict(model_life_gdp, explanatory_data)
)
# plot prediction on top of actual data
ggplot(asia,
aes(lifeExp, gdpPercap)
)+
geom_point() +
# add trendline
geom_smooth(
method = "lm",  # linear model
se =  FALSE     # standard error by default is false
)+
geom_point(
data =  predict_df,
color = "blue"
)
# make extrapolation outside of data range
extrapolation_explanatory_data <- tibble(lifeExp = 10)  # 10 is outside of data range
predict(model_life_gdp, extrapolation_explanatory_data)
View(asia)
coefficients(model_life_gdp)
# fitted for prediction on original dataset
fitted(model_life_gdp)
residuals(model_life_gdp)
summary(model_life_gdp)
summary(model_life_gdp) # extensive
library(tidy)
library(broom)
tidy(model_life_gdp)
augment(model_life_gdp)
glance(model_life_gdp)
glance(model_life_gdp) # model level report
install.packages("pprof")
?pprof
library(proftools)
install.packages("proftools")
?proftools
??proftools
library(proftools)
?proftools
pd <- readProfileData(system.file("samples", "glmEx.out", package="proftools"))
funSummary(pd)
callSummary(pd)
pathSummary(pd)
hotPaths(pd)
plot(pd)
plot(filterProfileData(pd, focus = "glm", self.pct=1, total.pct=10))
code(){
# Interesting code here
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
data1 <- data
# Four different ways of getting column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
})
code(){
# Interesting code here
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
data1 <- data
# Four different ways of getting column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
}
code()
code(){
# Interesting code here
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
data1 <- data
# Four different ways of getting column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
}
code(){
# Interesting code here
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
data1 <- data
# Four different ways of getting column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
}
lineprof(# Interesting code here
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
data1 <- data
# Four different ways of getting column means
means <- apply(data1[, names(data1) != "id"], 2, mean),
interval = 0.001, torture = FALSE)
code(test){
# Interesting code here
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
data1 <- data
# Four different ways of getting column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
}
lineprof(x<- rnorm(12:34), interval = 0.001, torture = FALSE)
install.packages("lineprof")
code <- function(){
# Interesting code here
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
data1 <- data
# Four different ways of getting column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
}
lineprof(code(), interval = 0.001, torture = FALSE)
profvis::profvis(code(), interval = 0.001, torture = FALSE)
shiny::runApp('rtdatasci_github/R/weather')
runApp('rtdatasci_github/R/weather')
